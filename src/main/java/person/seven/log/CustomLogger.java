package person.seven.log;import com.alibaba.fastjson.JSONObject;import org.apache.logging.log4j.core.Filter;import org.apache.logging.log4j.core.Layout;import org.apache.logging.log4j.core.LogEvent;import org.apache.logging.log4j.core.appender.AbstractAppender;import org.apache.logging.log4j.core.config.plugins.Plugin;import org.apache.logging.log4j.core.config.plugins.PluginAttribute;import org.apache.logging.log4j.core.config.plugins.PluginElement;import org.apache.logging.log4j.core.config.plugins.PluginFactory;import org.apache.logging.log4j.core.layout.PatternLayout;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.io.Serializable;/** * @description: 自定义logger * @author: liuqi create on 2018/7/13 **/@Plugin(name = "CustomLogger", category = "Core", elementType = "appender", printObject = true)public class CustomLogger extends AbstractAppender {    private static final Logger logger = LoggerFactory.getLogger(CustomLogger.class);    protected CustomLogger(String name, Filter filter, Layout<? extends Serializable> layout, boolean ignoreExceptions) {        super(name, filter, layout, ignoreExceptions);    }    @Override    public void append(LogEvent event) {        try {            // json封装日志源类名、方法名和消息，发送至日志监控队列            if ("ERROR".equals(event.getLevel().name()) && null != event.getSource() && null != event.getMessage()) {                JSONObject jo = new JSONObject();                jo.put("className", event.getSource().getClassName());                jo.put("methodName", event.getSource().getMethodName());                jo.put("msg", event.getMessage().getFormattedMessage());            }        } catch (Exception e) {            logger.error("日志内容转json失败", e);        }    }    /* 接收配置文件中的参数 */    @PluginFactory    public static CustomLogger createAppender(@PluginAttribute("name") String name,                                              @PluginElement("Filter") final Filter filter,                                              @PluginElement("Layout") Layout<? extends Serializable> layout,                                              @PluginAttribute("ignoreExceptions") boolean ignoreExceptions) {        if (name == null) {            logger.error("配置文件没定义appender名称");            return null;        }        if (layout == null) {            layout = PatternLayout.createDefaultLayout();        }        return new CustomLogger(name, filter, layout, ignoreExceptions);    }}