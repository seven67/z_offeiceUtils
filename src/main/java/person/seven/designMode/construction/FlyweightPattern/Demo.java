package person.seven.designMode.construction.FlyweightPattern;import java.util.Random;/** * @description: 享元模式 * 享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式， * 它提供了减少对象数量从而改善应用所需的对象结构的方式。 * 享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。我们将通过创建 5 个对象来画出 20 个分布于不同位置的圆来演示这种模式。 * 由于只有 5 种可用的颜色，所以 color 属性被用来检查现有的 Circle 对象。 * @author: liuqi create on 2018/8/15 **/public class Demo {    private static final String colors[] = { "Red", "Green", "Blue", "White", "Black" };    public static void main(String[] args) {        for (int i = 0; i <20 ; i++) {            Circle circle = (Circle) ShapeFactory.getShape(randomIndex());            circle.setX(randomX());            circle.setY(randomY());            circle.setRadius(100);            circle.draw();        }        System.out.println("所以上面看到的结果就是只创建了5个对象");    }    private static int randomY() {        return new Random().nextInt(200);    }    private static int randomX() {        return new Random().nextInt(100);    }    private static String randomIndex() {        return colors[new Random().nextInt(colors.length)];    }}