package person.seven.redis;import redis.clients.jedis.Jedis;import java.util.Collections;/** * @description: 分布式锁实现 * @author: liuqi create on 2018/5/28 **/public class RedisTool {    private static final String LOCK_SUCCESS = "OK";    private static final String SET_IF_NOT_EXIST = "NX";    private static final String SET_WITH_EXPIRE_TIME = "PX";    private static final Long RELEASE_SUCCESS = 1L;    /**     *     *  首先，为了确保分布式锁可用，我们至少要确保锁的实现同时满足以下四个条件：     *     *  互斥性。在任意时刻，只有一个客户端能持有锁。     *  不会发生死锁。即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。     *  具有容错性。只要大部分的Redis节点正常运行，客户端就可以加锁和解锁。     *  解铃还须系铃人。加锁和解锁必须是同一个客户端，客户端自己不能把别人加的锁给解了。     *     */    /**     * 尝试获取分布式锁     *     * @param jedis      Redis客户端     * @param lockKey    锁     * @param requestId  请求标识     * @param expireTime 超期时间     * @return 是否获取成功     */    public static boolean tryGetDistributedLock(Jedis jedis, String lockKey, String requestId, int expireTime) {//        String result = jedis.set(lockKey, requestId, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, expireTime);        String result = "";        if (LOCK_SUCCESS.equals(result)) {            return true;        }        return false;    }    /**     * 释放分布式锁     *     * @param jedis     Redis客户端     * @param lockKey   锁     * @param requestId 请求标识     * @return 是否释放成功     */    public static boolean releaseDistributedLock(Jedis jedis, String lockKey, String requestId) {        /**         *  jedis.eval(script,KEYS[1],ARGV[1]);         */        String script = "if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end";        Object result = jedis.eval(script, Collections.singletonList(lockKey), Collections.singletonList(requestId));        if (RELEASE_SUCCESS.equals(result)) {            return true;        }        return false;    }}