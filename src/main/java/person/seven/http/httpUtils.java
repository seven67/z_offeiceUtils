package person.seven.http;import org.apache.http.*;import org.apache.http.client.ClientProtocolException;import org.apache.http.client.entity.UrlEncodedFormEntity;import org.apache.http.client.methods.CloseableHttpResponse;import org.apache.http.client.methods.HttpPost;import org.apache.http.entity.ContentType;import org.apache.http.entity.mime.HttpMultipartMode;import org.apache.http.entity.mime.MultipartEntityBuilder;import org.apache.http.entity.mime.content.StringBody;import org.apache.http.impl.client.CloseableHttpClient;import org.apache.http.impl.client.HttpClients;import org.apache.http.message.BasicNameValuePair;import org.apache.http.protocol.HTTP;import org.apache.http.util.EntityUtils;import java.io.File;import java.io.IOException;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import java.util.Map;/** * @description: * @author: seven create on 2018/5/3     httpmime+httpclient **/public class httpUtils {    //1.获得一个httpclient对象    private static CloseableHttpClient httpclient = HttpClients.createDefault();    /**     * 发送不带参数的HttpPost请求     * @param url     * @return     */    public static String sendPost(String url) {        //2.生成一个post请求        HttpPost httppost = new HttpPost(url);        CloseableHttpResponse response = null;        try {            //3.执行get请求并返回结果            response = httpclient.execute(httppost);        } catch (IOException e) {            e.printStackTrace();        }        //4.处理结果，这里将结果返回为字符串        HttpEntity entity = response.getEntity();        String result = null;        try {            result = EntityUtils.toString(entity);        } catch (ParseException | IOException e) {            e.printStackTrace();        }        httppost.releaseConnection();        return result;    }    /**     * 发送HttpPost请求，参数为map     * @param url     * @param map     * @return     */    public static String sendPost(String url, Map<String, String> map) {        List<NameValuePair> formparams = new ArrayList<NameValuePair>();        for (Map.Entry<String, String> entry : map.entrySet()) {            //给参数赋值            formparams.add(new BasicNameValuePair(entry.getKey(), entry.getValue()));        }        UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, Consts.UTF_8);        HttpPost httppost = new HttpPost(url);        httppost.setEntity(entity);        CloseableHttpResponse response = null;        try {            response = httpclient.execute(httppost);        } catch (IOException e) {            e.printStackTrace();        }        HttpEntity entity1 = response.getEntity();        String result = null;        try {            result = EntityUtils.toString(entity1);        } catch (ParseException | IOException e) {            e.printStackTrace();        }        httppost.releaseConnection();        return result;    }    /**     * 带文件的http请求     * @param url     * @param params     * @return     * @throws ClientProtocolException     * @throws IOException     */    public static String httpRequest(String url, Map<String, Object> params) throws ClientProtocolException, IOException {        Iterator<String> keys = params.keySet().iterator();        params.entrySet();        MultipartEntityBuilder meb = MultipartEntityBuilder.create();        ContentType contentType = ContentType.create(HTTP.PLAIN_TEXT_TYPE, Consts.UTF_8);        for(Map.Entry<String, Object>  single : params.entrySet()){            String key = single.getKey();            Object value = single.getValue();            if (value instanceof File) {                // 文件参数                File file = (File) value;                meb.addBinaryBody(key, file, ContentType.DEFAULT_BINARY, file.getName());            } else {                // 普通参数                // meb.addTextBody(key, value.toString(),ContentType.DEFAULT_TEXT);                meb.addPart(key, new StringBody(value.toString(), contentType));            }        }        meb.setCharset(Consts.UTF_8);        meb.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);        HttpPost post = new HttpPost(url);        post.setEntity(meb.build());        HttpResponse response = httpclient.execute(post);        if (HttpStatus.SC_OK == response.getStatusLine().getStatusCode()) {            HttpEntity entitys = response.getEntity();            if (entitys != null) {                String rs = EntityUtils.toString(entitys, Consts.UTF_8);                post.releaseConnection();                return rs;            }        }        post.releaseConnection();        return null;    }}