package person.seven.thread;import java.util.Random;import java.util.concurrent.*;/** * @description: * @author: liuqi create on 2018/5/15 **/public class TestCyclicBarrier {    private static final Integer THREAD_SIZE = 6;    public static void main(String[] args) throws InterruptedException {        CyclicBarrier cyclicBarrier = new CyclicBarrier(THREAD_SIZE,new Thread(new Runnable() {            @Override            public void run() {                System.out.println(" 等大家处理完了，再执行我 ！");            }        }));        ExecutorService executorService = Executors.newFixedThreadPool(THREAD_SIZE);        for (int i = 0; i < THREAD_SIZE; i++) {            executorService.submit(new CycThread(cyclicBarrier,i+"号线程"));        }        TimeUnit.SECONDS.sleep(1);        System.out.println(" ~~~~~~~~CyclicBarrier 重复执行！ ");        for (int i = 0; i < THREAD_SIZE; i++) {            executorService.submit(new CycThread(cyclicBarrier,i+"号线程"));        }        executorService.shutdown();    }    static class CycThread implements Runnable {        private CyclicBarrier cyclicBarrier;        private String name;        public CycThread(CyclicBarrier cyclicBarrier, String name) {            this.cyclicBarrier = cyclicBarrier;            this.name = name;        }        @Override        public void run() {            try {//                int random = new Random().nextInt(3000);//                TimeUnit.MILLISECONDS.sleep(random);                System.out.println(name+"准备就绪");                cyclicBarrier.await();                System.out.println(name+"出发");            } catch (InterruptedException e) {                e.printStackTrace();            } catch (BrokenBarrierException e) {                e.printStackTrace();            }        }    }}