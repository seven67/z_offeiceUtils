package person.seven.thread.masterWorker;import com.google.common.collect.Lists;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Queue;import java.util.concurrent.*;/** * @description: * @author: liuqi create on 2018/4/20 **/public class Master {    //任务队列    protected Queue<Object> workQueue = new ConcurrentLinkedQueue<Object>();    //Worker进程队列    protected Map<String, Thread> threadMap = new HashMap<String, Thread>();    //Worker进程队列    protected List<Future> result = Lists.newArrayList();    //子任务处理结果集    protected Map<String, Object> resultMap = new ConcurrentHashMap<String, Object>();    private ExecutorService service ;    public Master(Worker worker, int countWorker) {        service = Executors.newFixedThreadPool(countWorker);        worker.setWorkQueue(workQueue);        worker.setResultMap(resultMap);        for (int i = 0; i < countWorker; i++) {            threadMap.put(Integer.toString(i), new Thread(worker, Integer.toString(i)));        }    }    //是否所有的子任务都介绍了    public boolean isComplete() throws ExecutionException, InterruptedException {        boolean finish = true;        for (int i = 0; i < result.size(); i++) {            if(result.get(i).get() != null){                finish = false;                break;            }        }        this.service.shutdown();        return finish;    }    //提交一个子任务    public void submit(Object job) {        workQueue.add(job);    }    //返回子任务结果集    public Map<String, Object> getResultMap() {        return resultMap;    }    //执行所有Worker进程，进行处理    public void execute() {        for (Map.Entry<String, Thread> entry : threadMap.entrySet()) {            result.add(this.service.submit(entry.getValue()));        }    }}