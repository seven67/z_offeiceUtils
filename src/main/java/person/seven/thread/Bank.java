package person.seven.thread;import java.util.concurrent.atomic.AtomicInteger;/** * @description:   对通一个对象的多个方法操作 * @author: liuqi create on 2018/8/2 **/public class Bank {    // 假设一个账户有1000块钱    static AtomicInteger moneys = new AtomicInteger(10000);    // 柜台Counter取钱的方法    public  void Counter(int money) {// 参数是每次取走的钱        synchronized (this){            System.out.println("A取走了" + money + "还剩下" + Bank.moneys.addAndGet(-money));        }    }    // ATM取钱的方法    public synchronized void ATM(int money) {// 参数是每次取走的钱        System.out.println("B取走了" + money + "还剩下" + Bank.moneys.addAndGet(-money));    }    public static void main(String[] args) {        // 实力化一个银行对象        Bank bank = new Bank();        // 实例化两个人，传入同一个银行的对象        PersonA pA = new PersonA(bank);        PersonB pB = new PersonB(bank);        // 两个人开始取钱        pA.start();        pB.start();    }}class PersonA extends Thread {    // 创建银行对象    Bank bank;    // 通过构造器传入银行对象，确保两个人进入的是一个银行    public PersonA(Bank bank) {        this.bank = bank;    }    //重写run方法，在里面实现使用柜台取钱    @Override    public void run() {        while (Bank.moneys.get() >= 100) {            bank.Counter(100);// 每次取100块        }    }}class PersonB extends Thread {    // 创建银行对象    Bank bank;    // 通过构造器传入银行对象，确保两个人进入的是一个银行    public PersonB(Bank bank) {        this.bank = bank;    }    // 重写run方法，在里面实现使用柜台取钱    @Override    public void run() {        while (Bank.moneys.get() >= 200) {            bank.ATM(200);// 每次取200块        }    }}